"""
191.位1的个数
编写一个函数，输入是一个无符号整数（以二进制串的形式），返回其二进制表达式中数字位数为 '1' 的个数（也被称为汉明重量）。
提示：
    请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。
    在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。
提示：输入必须是长度为 32 的 二进制串 。
解题思路：循环检查二进制位；位运算优化
"""
class Solution(object):
    def hammingWeight(self, n):
        """
        :type n: int
        :rtype: int
        循环检查二进制位
        我们可以直接循环检查给定整数 n 的二进制位的每一位是否为 1。
        具体代码中，当检查第 i 位时，我们可以让 n 与 2^i进行与运算，当且仅当 n 的第 i 位为 1 时，运算结果不为 0。
        时间击败66.74%，内存击败5.36%
        """
        return sum(1 for i in range(32) if n & (1 << i))

    def hammingWeight1(self, n):
        """
        :type n: int
        :rtype: int
        位运算优化
        观察这个运算：n & (n−1)，其运算结果恰为把 n 的二进制位中的最低位的 1 变为 0 之后的结果。
            如：6&(6-1) = 4, 6 = (110)_2, 4 = (100)_2
            运算结果 4 即为把 6 的二进制位中的最低位的 1 变为 0 之后的结果。
        这样我们可以利用这个位运算的性质加速我们的检查过程，在实际代码中，我们不断让当前的 n 与 n−1 做与运算，直到 n 变为 0 即可
        因为每次运算会使得 n 的最低位的 1 被翻转，因此运算次数就等于 n 的二进制位中 1 的个数。
        时间击败38.63%，内存击败83.05%
        """
        result = 0
        while n:
            n = n & (n-1)
            result += 1
        return result
